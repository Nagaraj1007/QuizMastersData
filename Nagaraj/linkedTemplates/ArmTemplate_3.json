{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Nagaraj"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Lenskart_Contact_Lens_Data_Prices.csv",
						"folderPath": "InputFolder",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Product Id",
						"type": "String"
					},
					{
						"name": "Market Price",
						"type": "String"
					},
					{
						"name": "Lenskart Price",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "noc_regions",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "noc_regions.xls",
						"folderPath": "InputFolder",
						"container": "data"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "NOC",
						"type": "String"
					},
					{
						"name": "region",
						"type": "String"
					},
					{
						"name": "notes",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MongoDbV2Collection1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MongoDb1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MongoDbV2Collection",
				"schema": [],
				"typeProperties": {
					"collection": "quizdetails"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MongoDbV2Collection2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MongoDb2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MongoDbV2Collection",
				"schema": [],
				"typeProperties": {
					"collection": "quizsets"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "OutputData.csv",
						"folderPath": "OutputFolder",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lenskart')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable16",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          image_url as string,",
						"          image_url_suffix as string,",
						"          imageUrls as string,",
						"          product_url as string,",
						"          occasion as string,",
						"          suited_for as string,",
						"          brand_name as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          prices as string,",
						"          is_tbyb as string,",
						"          tags as string,",
						"          color_options as string,",
						"          totalColorAvailable as string,",
						"          is_ditto as string,",
						"          classification as string,",
						"          specifications as string,",
						"          wishlistCount as string,",
						"          purchaseCount as string,",
						"          avgRating as string,",
						"          totalNoOfRatings as string,",
						"          hashtagList as string,",
						"          offerName as string,",
						"          clUsage as string,",
						"          arModelAndroidUrl as string,",
						"          arModelIOSUrl as string,",
						"          arModelMsiteAndDesktopUrl as string,",
						"          arModelOriginalUrl as string,",
						"          qty as string,",
						"          subCollection as string,",
						"          inclusiveText as string,",
						"          relatedItems as string,",
						"          isCygnusEnabled as string,",
						"          isCashbackApplicable as string,",
						"          searchProductName as string,",
						"          prescriptionType as string,",
						"          brand_logo as string,",
						"          color as string,",
						"          size as string,",
						"          width as string,",
						"          cmsLinkAndroid as string,",
						"          cmsLinkIos as string,",
						"          frameColorImage as string,",
						"          isCombo as string,",
						"          tryOnImageUrl as string,",
						"          offer_image as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          id,",
						"          brand_name,",
						"          model_name,",
						"          classification,",
						"          wishlistcount = wishlistCount,",
						"          purchaseCount,",
						"          avgRating,",
						"          qty",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SunglassDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SunglassDataSet",
								"type": "DatasetReference"
							},
							"name": "sunglassdataset"
						},
						{
							"dataset": {
								"referenceName": "CustomersDataSet",
								"type": "DatasetReference"
							},
							"name": "customerdataset"
						},
						{
							"dataset": {
								"referenceName": "TransactionsDataSet",
								"type": "DatasetReference"
							},
							"name": "transactiondataset"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SunglassDestinationDataSet",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "SunglassDestinationDataSet",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "SunglassDestinationDataSet",
								"type": "DatasetReference"
							},
							"name": "sink3"
						},
						{
							"dataset": {
								"referenceName": "SunglassDestinationDataSet",
								"type": "DatasetReference"
							},
							"name": "sink4"
						}
					],
					"transformations": [
						{
							"name": "sunglassdetails"
						},
						{
							"name": "sunglassprice"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "customertransaction"
						},
						{
							"name": "customertransaction1"
						},
						{
							"name": "join1"
						},
						{
							"name": "sunglassCustomerProductDetails"
						},
						{
							"name": "groupByCustomer"
						},
						{
							"name": "rank1"
						},
						{
							"name": "customerbyrankofpurchase"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          image_url as string,",
						"          image_url_suffix as string,",
						"          imageUrls as string,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as string,",
						"          brand_name as string,",
						"          brand_name_en as string,",
						"          brand_logo as string,",
						"          model_name as string,",
						"          prices as string,",
						"          is_tbyb as string,",
						"          tags as string,",
						"          color_options as string,",
						"          totalColorAvailable as string,",
						"          is_ditto as string,",
						"          classification as string,",
						"          specifications as string,",
						"          wishlistCount as string,",
						"          purchaseCount as string,",
						"          avgRating as string,",
						"          totalNoOfRatings as string,",
						"          hashtagList as string,",
						"          offerName as string,",
						"          cmsLinkAndroid as string,",
						"          cmsLinkIos as string,",
						"          arModelAndroidUrl as string,",
						"          arModelIOSUrl as string,",
						"          arModelMsiteAndDesktopUrl as string,",
						"          arModelOriginalUrl as string,",
						"          qty as string,",
						"          frameColorImage as string,",
						"          subCollection as string,",
						"          subCollectionId as string,",
						"          relatedItems as string,",
						"          isCygnusEnabled as string,",
						"          isCashbackApplicable as string,",
						"          searchProductName as string,",
						"          prescriptionType as string,",
						"          occasion as string,",
						"          suited_for as string,",
						"          inclusiveText as string,",
						"          clUsage as string,",
						"          tryOnImageUrl as string,",
						"          offer_image as string,",
						"          isCombo as string,",
						"          comboImageUrl as string,",
						"          comboDescription as string,",
						"          market_price as integer,",
						"          lenskart_price as integer,",
						"          frame_size as string,",
						"          frame_shape as string,",
						"          brandname as string,",
						"          frametype as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sunglassdataset",
						"source(output(",
						"          customer_id as string,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          phone_number as string,",
						"          address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> customerdataset",
						"source(output(",
						"          customer_id as string,",
						"          product_id as string,",
						"          quantity as integer,",
						"          transaction_date as string,",
						"          transaction_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> transactiondataset",
						"sunglassdataset select(mapColumn(",
						"          id,",
						"          color,",
						"          size,",
						"          width,",
						"          brand_name,",
						"          model_name,",
						"          tags,",
						"          wishlistCount,",
						"          purchaseCount,",
						"          avgRating,",
						"          totalNoOfRatings,",
						"          frame_size,",
						"          frame_shape,",
						"          brandname,",
						"          frametype",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sunglassdetails",
						"sunglassdataset select(mapColumn(",
						"          p_id = id,",
						"          market_price,",
						"          lenskart_price",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sunglassprice",
						"sunglassprice derive(Discount = minus(market_price, lenskart_price)) ~> derivedColumn1",
						"derivedColumn1 derive(Remarks = iif(Discount==0, \"Discount Needed\", \"Discount not Needded\")) ~> derivedColumn2",
						"customerdataset, transactiondataset join(customerdataset@customer_id == transactiondataset@customer_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> customertransaction",
						"customertransaction select(mapColumn(",
						"          customer_id = customerdataset@customer_id,",
						"          product_id,",
						"          first_name,",
						"          last_name,",
						"          email,",
						"          phone_number,",
						"          address,",
						"          quantity",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> customertransaction1",
						"customertransaction1, sunglassdetails join(product_id == id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          customer_id,",
						"          product_id,",
						"          first_name,",
						"          last_name,",
						"          email,",
						"          phone_number,",
						"          address,",
						"          quantity,",
						"          color,",
						"          size,",
						"          width,",
						"          brand_name,",
						"          model_name,",
						"          avgRating,",
						"          frame_size,",
						"          frame_shape,",
						"          brandname,",
						"          frametype",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sunglassCustomerProductDetails",
						"sunglassCustomerProductDetails aggregate(groupBy(customer_id),",
						"     total_purchase = sum(quantity)) ~> groupByCustomer",
						"groupByCustomer rank(desc(total_purchase, true),",
						"     output(Rank as long)) ~> rank1",
						"rank1, customerdataset join(groupByCustomer@customer_id == customerdataset@customer_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> customerbyrankofpurchase",
						"customerbyrankofpurchase select(mapColumn(",
						"          customer_id = groupByCustomer@customer_id,",
						"          total_purchase,",
						"          customer_id = customerdataset@customer_id,",
						"          first_name,",
						"          last_name,",
						"          email,",
						"          phone_number,",
						"          address,",
						"          Rank",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['price-dimension.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"sunglassdetails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['sunglass-details.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2",
						"sunglassCustomerProductDetails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['fact-customer-product'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink3",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Matrix-TopCustomers.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink4"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable7",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable9",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "rank1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          code as string,",
						"          userID as string,",
						"          name as string,",
						"          domain as string,",
						"          questionName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 aggregate(groupBy(domain,",
						"          userID),",
						"     NumberOfQuestions = count(questionName)) ~> aggregate1",
						"aggregate1 rank(asc(NumberOfQuestions, true),",
						"     output(rank as long)) ~> rank1",
						"rank1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable10",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable11",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "rank1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          domain as string,",
						"          userID as string,",
						"          NumberOfQuestions as integer,",
						"          rank as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 aggregate(groupBy(userID),",
						"     NumberOfQuizes = count(userID)) ~> aggregate1",
						"aggregate1 rank(desc(NumberOfQuizes, true),",
						"     output(rank as long)) ~> rank1",
						"rank1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow4')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable13",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable14",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable15",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          userID as string,",
						"          NumberOfQuizes as integer,",
						"          rank as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          firstname as string,",
						"          lastname as string,",
						"          phone as string,",
						"          password as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source1, source2 join(userID == phone,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          userID,",
						"          NumberOfQuizes,",
						"          rank,",
						"          firstname,",
						"          lastname",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lenskart Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lenskart Data Flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Lenskart",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Lenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SunglassPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sunglass",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SunglassDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sunglassdataset": {},
									"customerdataset": {},
									"transactiondataset": {},
									"sink1": {},
									"sink2": {},
									"sink3": {},
									"sink4": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SunglassDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbV2Source",
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['code']"
										},
										"sink": {
											"name": "code"
										}
									},
									{
										"source": {
											"path": "$['userID']"
										},
										"sink": {
											"name": "userID"
										}
									},
									{
										"source": {
											"path": "$['name']"
										},
										"sink": {
											"name": "name"
										}
									},
									{
										"source": {
											"path": "$['domain']"
										},
										"sink": {
											"name": "domain"
										}
									},
									{
										"source": {
											"path": "[['questionName']"
										},
										"sink": {
											"name": "questionName"
										}
									}
								],
								"collectionReference": "$['questions']"
							}
						},
						"inputs": [
							{
								"referenceName": "MongoDbV2Collection2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable6",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"temp": {
						"type": "Int",
						"defaultValue": 0
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-04T10:48:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MongoDbV2Collection2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-04T11:22:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline5')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow4",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-04T12:11:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_for_replacing_empty_values')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "InputFile",
								"type": "DatasetReference"
							},
							"name": "InputSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "surrogateKey1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          NOC as string,",
						"          region as string,",
						"          notes as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> InputSource",
						"surrogateKey1 derive(notes = iif(notes == '' || isNull(notes), \"Empty\", notes),",
						"          region = upper(region)) ~> derivedColumn1",
						"InputSource keyGenerate(output({Surrogate Key } as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InputFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Prices_Contact_Lens')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable17",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Product Id} as string,",
						"          {Market Price} as integer,",
						"          {Lenskart Price} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(Difference = {Market Price} - {Lenskart Price}) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Product_Id = {Product Id},",
						"          Market_Price = {Market Price},",
						"          Lenskart_Price = {Lenskart Price},",
						"          Difference",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Product_Id as string,",
						"          Market_Price as integer,",
						"          Lenskart_Price as integer,",
						"          Difference as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "InputFile",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OutputFile",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          NOC as string,",
						"          region as string,",
						"          notes as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(notes = iif(notes == '' || isNull(notes), \"Empty\", notes)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InputFile')]",
				"[concat(variables('factoryId'), '/datasets/OutputFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Contact_Lens_Prices_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Prices of Contact Lens",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Prices_Contact_Lens",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Prices_Contact_Lens')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_for_replacing_empty_values",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InputSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-01T06:57:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Dataflow_for_replacing_empty_values')]"
			]
		}
	]
}