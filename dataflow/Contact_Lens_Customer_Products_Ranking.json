{
	"name": "Contact_Lens_Customer_Products_Ranking",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CustomersDataSet",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "TransactionsDataSet",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable18",
						"type": "DatasetReference"
					},
					"name": "source3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Contact_Lens_Customer_Ranking",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "Contact_Lens_Top_Products",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join2"
				},
				{
					"name": "select1"
				},
				{
					"name": "rank1"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "join3"
				},
				{
					"name": "select2"
				},
				{
					"name": "rank2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          customer_id as string,",
				"          first_name as string,",
				"          last_name as string,",
				"          email as string,",
				"          phone_number as string,",
				"          address as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          customer_id as string,",
				"          product_id as string,",
				"          quantity as integer,",
				"          transaction_date as string,",
				"          transaction_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source(output(",
				"          id as string,",
				"          brand_name as string,",
				"          model_name as string,",
				"          classification as string,",
				"          wishlistcount as string,",
				"          purchaseCount as string,",
				"          avgRating as string,",
				"          qty as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source3",
				"source1, source2 join(source1@customer_id == source2@customer_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 aggregate(groupBy(source1@customer_id),",
				"     Number_Of_Products = count(product_id),",
				"          Number_Of_Quantities = sum(quantity)) ~> aggregate1",
				"aggregate1, source1 join(aggregate1@customer_id == source1@customer_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          customer_id = aggregate1@customer_id,",
				"          Number_Of_Products,",
				"          Number_Of_Quantities,",
				"          customer_id = source1@customer_id,",
				"          first_name,",
				"          last_name,",
				"          email,",
				"          phone_number,",
				"          address",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 rank(desc(Number_Of_Products, true),",
				"     desc(Number_Of_Quantities, true),",
				"     output(Customer_Rank as long)) ~> rank1",
				"source2 aggregate(groupBy(product_id),",
				"     Total_Quantities_Sold = sum(quantity)) ~> aggregate2",
				"aggregate2, source3 join(product_id == id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3 select(mapColumn(",
				"          product_id,",
				"          Total_Quantities_Sold,",
				"          brand_name,",
				"          model_name,",
				"          classification",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 rank(desc(Total_Quantities_Sold, true),",
				"     output(Top_Products as long)) ~> rank2",
				"rank1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"rank2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2"
			]
		}
	}
}