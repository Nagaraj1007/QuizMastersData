{
	"name": "SunglassDataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SunglassDataSet",
						"type": "DatasetReference"
					},
					"name": "sunglassdataset"
				},
				{
					"dataset": {
						"referenceName": "CustomersDataSet",
						"type": "DatasetReference"
					},
					"name": "customerdataset"
				},
				{
					"dataset": {
						"referenceName": "TransactionsDataSet",
						"type": "DatasetReference"
					},
					"name": "transactiondataset"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SunglassDestinationDataSet",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "SunglassDestinationDataSet",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "SunglassDestinationDataSet",
						"type": "DatasetReference"
					},
					"name": "sink3"
				},
				{
					"dataset": {
						"referenceName": "SunglassDestinationDataSet",
						"type": "DatasetReference"
					},
					"name": "sink4"
				}
			],
			"transformations": [
				{
					"name": "sunglassdetails"
				},
				{
					"name": "sunglassprice"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "customertransaction"
				},
				{
					"name": "customertransaction1"
				},
				{
					"name": "join1"
				},
				{
					"name": "sunglassCustomerProductDetails"
				},
				{
					"name": "groupByCustomer"
				},
				{
					"name": "rank1"
				},
				{
					"name": "customerbyrankofpurchase"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          image_url as string,",
				"          image_url_suffix as string,",
				"          imageUrls as string,",
				"          product_url as string,",
				"          color as string,",
				"          size as string,",
				"          width as string,",
				"          brand_name as string,",
				"          brand_name_en as string,",
				"          brand_logo as string,",
				"          model_name as string,",
				"          prices as string,",
				"          is_tbyb as string,",
				"          tags as string,",
				"          color_options as string,",
				"          totalColorAvailable as string,",
				"          is_ditto as string,",
				"          classification as string,",
				"          specifications as string,",
				"          wishlistCount as string,",
				"          purchaseCount as string,",
				"          avgRating as string,",
				"          totalNoOfRatings as string,",
				"          hashtagList as string,",
				"          offerName as string,",
				"          cmsLinkAndroid as string,",
				"          cmsLinkIos as string,",
				"          arModelAndroidUrl as string,",
				"          arModelIOSUrl as string,",
				"          arModelMsiteAndDesktopUrl as string,",
				"          arModelOriginalUrl as string,",
				"          qty as string,",
				"          frameColorImage as string,",
				"          subCollection as string,",
				"          subCollectionId as string,",
				"          relatedItems as string,",
				"          isCygnusEnabled as string,",
				"          isCashbackApplicable as string,",
				"          searchProductName as string,",
				"          prescriptionType as string,",
				"          occasion as string,",
				"          suited_for as string,",
				"          inclusiveText as string,",
				"          clUsage as string,",
				"          tryOnImageUrl as string,",
				"          offer_image as string,",
				"          isCombo as string,",
				"          comboImageUrl as string,",
				"          comboDescription as string,",
				"          market_price as integer,",
				"          lenskart_price as integer,",
				"          frame_size as string,",
				"          frame_shape as string,",
				"          brandname as string,",
				"          frametype as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sunglassdataset",
				"source(output(",
				"          customer_id as string,",
				"          first_name as string,",
				"          last_name as string,",
				"          email as string,",
				"          phone_number as string,",
				"          address as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> customerdataset",
				"source(output(",
				"          customer_id as string,",
				"          product_id as string,",
				"          quantity as integer,",
				"          transaction_date as string,",
				"          transaction_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> transactiondataset",
				"sunglassdataset select(mapColumn(",
				"          id,",
				"          color,",
				"          size,",
				"          width,",
				"          brand_name,",
				"          model_name,",
				"          tags,",
				"          wishlistCount,",
				"          purchaseCount,",
				"          avgRating,",
				"          totalNoOfRatings,",
				"          frame_size,",
				"          frame_shape,",
				"          brandname,",
				"          frametype",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sunglassdetails",
				"sunglassdataset select(mapColumn(",
				"          p_id = id,",
				"          market_price,",
				"          lenskart_price",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sunglassprice",
				"sunglassprice derive(Discount = minus(market_price, lenskart_price)) ~> derivedColumn1",
				"derivedColumn1 derive(Remarks = iif(Discount==0, \"Discount Needed\", \"Discount not Needded\")) ~> derivedColumn2",
				"customerdataset, transactiondataset join(customerdataset@customer_id == transactiondataset@customer_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> customertransaction",
				"customertransaction select(mapColumn(",
				"          customer_id = customerdataset@customer_id,",
				"          product_id,",
				"          first_name,",
				"          last_name,",
				"          email,",
				"          phone_number,",
				"          address,",
				"          quantity",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> customertransaction1",
				"customertransaction1, sunglassdetails join(product_id == id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          customer_id,",
				"          product_id,",
				"          first_name,",
				"          last_name,",
				"          email,",
				"          phone_number,",
				"          address,",
				"          quantity,",
				"          color,",
				"          size,",
				"          width,",
				"          brand_name,",
				"          model_name,",
				"          avgRating,",
				"          frame_size,",
				"          frame_shape,",
				"          brandname,",
				"          frametype",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sunglassCustomerProductDetails",
				"sunglassCustomerProductDetails aggregate(groupBy(customer_id),",
				"     total_purchase = sum(quantity)) ~> groupByCustomer",
				"groupByCustomer rank(desc(total_purchase, true),",
				"     output(Rank as long)) ~> rank1",
				"rank1, customerdataset join(groupByCustomer@customer_id == customerdataset@customer_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> customerbyrankofpurchase",
				"customerbyrankofpurchase select(mapColumn(",
				"          customer_id = groupByCustomer@customer_id,",
				"          total_purchase,",
				"          customer_id = customerdataset@customer_id,",
				"          first_name,",
				"          last_name,",
				"          email,",
				"          phone_number,",
				"          address,",
				"          Rank",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['price-dimension.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"sunglassdetails sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['sunglass-details.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2",
				"sunglassCustomerProductDetails sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['fact-customer-product'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink3",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Matrix-TopCustomers.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink4"
			]
		}
	}
}